#include "stir/IO/HDF5Wrapper.h"

START_NAMESPACE_STIR

bool HDF5Wrapper::check_GE_signature(const std::string filename)
{
    H5::H5File file;
    file.openFile( filename, H5F_ACC_RDONLY );
    H5::StrType  vlst(0,37);  // 37 here is the length of the string (I got it from the text file generated by list2txt with the LIST000_decomp.BLF

    std::string read_str_scanner;
    std::string read_str_manufacturer;

    H5::DataSet dataset = file.openDataSet("/HeaderData/ExamData/scannerDesc");
    dataset.read(read_str_scanner,vlst);

    H5::DataSet dataset2= file.openDataSet("/HeaderData/ExamData/manufacturer");
    dataset2.read(read_str_manufacturer,vlst);

    if(read_str_scanner == "SIGNA PET/MR" &&
            read_str_manufacturer == "GE MEDICAL SYSTEMS")
        return true;

    return false;
}

HDF5Wrapper::HDF5Wrapper()
{

}

HDF5Wrapper::HDF5Wrapper(const std::string& filename)
{
    open(filename);

}

shared_ptr<Scanner>
HDF5Wrapper::get_scanner_sptr() const
{
    return this->scanner_sptr;
}

shared_ptr<ExamInfo>
HDF5Wrapper::get_exam_info_sptr() const
{
//    return this->exam_info_sptr;
}

Succeeded
HDF5Wrapper::open(const std::string& filename)
{
    file.openFile( filename, H5F_ACC_RDONLY );

    if(HDF5Wrapper::check_GE_signature(filename))
    {
        warning("CListModeDataGESigna: "
                "Probably this is GESigna, but couldn't find scan start time etc."
                "The scanner is initialised from library instread from HDF5 header.");
        is_signa = true;

        this->scanner_sptr.reset(new Scanner(Scanner::PETMR_Signa));

        // TODO: read scanner type from the dataset: "/HeaderData/ExamData/scannerDesc"
        //this->exam_info_sptr.reset(new ExamInfo);

        return Succeeded::yes;
    }
    else
    {
        // Read from HDF5 header ...
        return initialise_scanner_from_HDF5();
    }
}

Succeeded HDF5Wrapper::initialise_scanner_from_HDF5()
{
    H5::DataSet str_num_rings = file.openDataSet("/HeaderData/SystemGeometry/");

    H5::DataSet str_inner_ring_diameter = file.openDataSet("/HeaderData/SystemGeometry/effectiveRingDiameter");

    H5::DataSet str_axial_blocks_per_module = file.openDataSet("/HeaderData/SystemGeometry/axialBlocksPerModule");
    H5::DataSet str_radial_blocks_per_module = file.openDataSet("/HeaderData/SystemGeometry/radialBlocksPerModule");

    H5::DataSet str_axial_blocks_per_unit = file.openDataSet("/HeaderData/SystemGeometry/axialBlocksPerUnit");
    H5::DataSet str_radial_blocks_per_unit = file.openDataSet("/HeaderData/SystemGeometry/radialBlocksPerUnit");

    H5::DataSet str_axial_units_per_module = file.openDataSet("/HeaderData/SystemGeometry/axialUnitsPerModule");
    H5::DataSet str_radial_units_per_module = file.openDataSet("/HeaderData/SystemGeometry/radialUnitsPerModule");

    H5::DataSet str_axial_modules_per_system = file.openDataSet("/HeaderData/SystemGeometry/axialModulesPerSystem");
    H5::DataSet str_radial_modules_per_system = file.openDataSet("/HeaderData/SystemGeometry/radialModulesPerSystem");

    //! \todo P.W: Find the crystal gaps and other info missing.

    //! \todo Convert to numbers.

//    scanner_sptr.reset(new Scanner(
//                           ));


    return Succeeded::yes;
}

END_NAMESPACE_STIR
