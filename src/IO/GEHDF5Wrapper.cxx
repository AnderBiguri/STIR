//
//
/*!
  \file
  \ingroup IO
  \ingroup GE
  \brief Declaration of class stir::GE::RDF_HDF5::GEHDF5Wrapper

  \author Nikos Efthimiou
  \author Palak Wadhwa
  \author Ander Biguri


*/
/*
    Copyright (C) 2017-2019, University of Leeds
    Copyright (C) 2018 University of Hull
    Copyright (C) 2018-2019, University College London
    This file is part of STIR.

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    See STIR/LICENSE.txt for details
*/

#include "stir/IO/GEHDF5Wrapper.h"
#include "stir/IndexRange3D.h" // AB: todo, this should be in .h?
#include <sstream>

START_NAMESPACE_STIR
namespace GE {
namespace RDF_HDF5 {

bool GEHDF5Wrapper::check_GE_signature(const std::string& filename)
{
    H5::H5File file;
    file.openFile( filename, H5F_ACC_RDONLY );
    if(!file.isHdf5(filename))
        return 0;

    return (check_current_signature(file)!=GE_scanner::not_GE);
    
}

unsigned int GEHDF5Wrapper::get_num_singles_samples()
{
    return m_num_singles_samples;
}


// AB Cheks if its a GE Scanner file, and returns which one it is (for now only Signa supported, 1)
// treat the output as a bool if you onyl want to know if its a GE file. 
GE_scanner GEHDF5Wrapper::check_current_signature(H5::H5File& file)
{
    if(file.getId() == -1)
        error("File is not open. Aborting");

    H5::StrType  vlst(0,37);  //(not AB) 37 here is the length of the string (I got it from the text file generated by list2txt with the LIST000_decomp.BLF
    std::string read_str_scanner;
    std::string read_str_manufacturer;

    H5::DataSet dataset = file.openDataSet("/HeaderData/ExamData/scannerDesc");
    dataset.read(read_str_scanner,vlst);

    H5::DataSet dataset2= file.openDataSet("/HeaderData/ExamData/manufacturer");
    dataset2.read(read_str_manufacturer,vlst);
    
    if(read_str_manufacturer == "GE MEDICAL SYSTEMS")
    {
        if(read_str_scanner != "SIGNA PET/MR")
        {
            warning("GEHDF5 reader has only been tested with the SIGNA PET/MR, unsure if it will work with this scanner");
            return GE_scanner::unknown; // AB; whatever 2 is.
        }

        return GE_scanner::Signa;
    }
    return GE_scanner::not_GE;
}

// // Checks if input file is listfile. 
// AB: todo do we want this func? helps test from filename
/*
bool
GEHDF5Wrapper::is_list_file(const std::string& filename)
{

    H5::H5File file;

    if(!file.isHdf5(filename))
        error("File is not HDF5. Aborting");

    file.openFile( filename, H5F_ACC_RDONLY );
    // All RDF files shoudl have this DataSet
    H5::DataSet dataset = file.openDataSet("/HeaderData/RDFConfiguration/isListFile");
    unsigned int is_list;
    dataset.read(&is_list, H5::PredType::STD_U32LE);
    return is_list;

}
*/

// Checks if input file is listfile
// AB todo: only valid for RDF9 (until they tell us otherwise)
bool
GEHDF5Wrapper::is_list_file()
{
    // have we already checked this?
    if(is_list)
        return true;

    if(file.getId() == -1)
        error("File is not open. Aborting");

    // All RDF files shoudl have this DataSet
    H5::DataSet dataset = file.openDataSet("/HeaderData/RDFConfiguration/isListFile");
    unsigned int is_list_file;
    dataset.read(&is_list_file, H5::PredType::STD_U32LE);
    return is_list_file;

}

// Checks if file is a sino file. 
// AB todo: only valid for RDF9 (until they tell us otherwise)
bool
GEHDF5Wrapper::is_sino_file()
{
    if(is_sino)
        return true;
    if(file.getId() == -1)
        error("File is not open. Aborting");

    // If this Group exists, its a sino file. 
    // huh, no C++ way to do this without try catch. https://stackoverflow.com/questions/35668056/test-group-existence-in-hdf5-c
    return H5Lexists( file.getId(), "/SegmentData/Segment2", H5P_DEFAULT ) > 0;
}
bool
GEHDF5Wrapper::is_geo_file()
{
    // Aparently the norm file has the geo file inside. This means that the geo file is superfluous. 
    // For now, lets just make this fucntion is_geo_or_norm_file(). Perhaps later versions will no be like this and this we need to change this function.  

    if(is_geo || is_norm)
        return true;
    if(file.getId() == -1)
        error("File is not open. Aborting");
    return H5Lexists( file.getId(), "/SegmentData/Segment4/3D_Norm_Correction/slice1", H5P_DEFAULT ) > 0;
    // AB if you want to make sure geo is definetly geo, and not geo or norm, add to the avobe line: && !H5Lexists( file.getId(), "/3DCrystalEfficiency/crystalEfficiency", H5P_DEFAULT );
}
bool
GEHDF5Wrapper::is_norm_file()
{
    if(is_norm)
        return true;
    if(file.getId() == -1)
        error("File is not open. Aborting");

    return H5Lexists( file.getId(), "/3DCrystalEfficiency/crystalEfficiency", H5P_DEFAULT ) > 0;
}
GEHDF5Wrapper::GEHDF5Wrapper()
{
    // Not much.
}

GEHDF5Wrapper::GEHDF5Wrapper(const std::string& filename)
{
    
    if(!file.isHdf5(filename))
        error("GEHDF5Wrapper: The input file is not HDF5! Abort.");

    if(open(filename) == Succeeded::no)
        error("GEHDF5Wrapper: Error opening HDF5 file. Abort.");
}

// Function that error checks the input file and sets flags for the correct formats. GEHDF5Wrapper.file must be already open.
// AB todo: this file is only valid for RDF 9. 
Succeeded 
GEHDF5Wrapper::check_file()
{
    if(file.getId()==-1)
        error("File is not open. Aborting");
    //AB: We are openign a new file. The same class should not be used twice, but lets make sure that if it happens, we reseted the file identifiers.
    is_list=false; is_norm=false;is_geo=false;is_sino=false;
    is_signa=false;
    
    //AB  Find out the RDF version of the file.
    H5::DataSet str_file_version = file.openDataSet("/HeaderData/RDFConfiguration/fileVersion/majorVersion");
    str_file_version.read(&rdf_ver, H5::PredType::STD_U32LE);
    
    //AB Lets just error for now. 
    if (rdf_ver!=9)
        error("Only RDF version 9 supported. Aborting");

    // Lets check if its a GE scanner and which one is it
    GE_scanner scanner = check_current_signature(file);
    if(scanner==GE_scanner::not_GE)
        error("File is HDF5 but not GE data. Aborting");
    if(scanner==GE_scanner::unknown)
        warning("Unknown GE scanner, attempting to continue");


    if(is_list_file())
    {
        is_list = true;
        // AB Now lets check all things that are required
        if (rdf_ver == 9) //AB todo: is this valid for 10?
        {
            // Check 1: Is the file compressed?
            unsigned int is_compressed;
            H5::DataSet str_file_version = file.openDataSet("/HeaderData/ListHeader/isListCompressed");
            str_file_version.read(&is_compressed, H5::PredType::STD_U32LE);
            if (is_compressed)
                error("The RDF9 Listmode file is compressed, we won't be able to read it. Please uncompress it and retry. Aborting");
        }

        return Succeeded::yes;
    }
    if(is_sino_file())
    {
        is_sino = true;
         if (rdf_ver == 9) //AB todo: is this valid for 10?
        {
            // Check 1: Is the file compressed?
            unsigned int is_compressed;
            H5::DataSet str_file_version = file.openDataSet("/HeaderData/Sorter/Segment2/compDataSegSize");
            str_file_version.read(&is_compressed, H5::PredType::STD_U32LE);
            if (is_compressed)
                error("The RDF9 file sinogram is compressed, we won't be able to read it. Please uncompress it and retry. Aborting");
        }
        return Succeeded::yes;
    }
    if(is_norm_file())
    {
        is_norm=true;
        return Succeeded::yes;
    }
    if(is_geo_file())
    {
        is_geo=true;
        return Succeeded::yes;
    }
    // should not get here.
    return Succeeded::no;
}

Succeeded
GEHDF5Wrapper::open(const std::string& filename)
{
    if(!file.isHdf5(filename))
        error("GEHDF5Wrapper: The input file is not HDF5! Abort.");

    file.openFile(filename, H5F_ACC_RDONLY);

    //AB: check if the input file is valid, not only as a HDF5, also a valid PET file. 
    check_file();

    // AB: check if this initialization should be here or later. Maybe RDF10 will have different fields. 
    initialise_exam_info();

    // Read from HDF5 header ...
    return initialise_scanner_from_HDF5();
}

Succeeded GEHDF5Wrapper::initialise_scanner_from_HDF5()
{
    std::string read_str_scanner;
    H5::StrType  vlst(0,37);  // 37 here is the length of the string (I got it from the text file generated by list2txt with the LIST000_decomp.BLF

    H5::DataSet dataset = file.openDataSet("/HeaderData/ExamData/scannerDesc");
    dataset.read(read_str_scanner,vlst);

    int num_transaxial_blocks_per_bucket = 0;
    int num_axial_blocks_per_bucket = 0;
    int axial_blocks_per_unit = 0;
    int radial_blocks_per_unit = 0;
    int axial_units_per_module = 0;
    int radial_units_per_module = 0;
    int axial_modules_per_system = 0;
    int radial_modules_per_system = 0;
    int max_num_non_arccorrected_bins = 0;
    int num_transaxial_crystals_per_block = 0;
    int num_axial_crystals_per_block = 0 ;
    float inner_ring_diameter = 0.0;
    float effective_ring_diameter = 0.0;
    float detector_axial_size = 0.0;
    float intrinsic_tilt = 0.0;
    int num_detector_layers = 1;
    float energy_resolution = -1.0f;
    float reference_energy = -1.0f;

    H5::DataSet str_effective_ring_diameter = file.openDataSet("/HeaderData/SystemGeometry/effectiveRingDiameter");
    H5::DataSet str_axial_blocks_per_module = file.openDataSet("/HeaderData/SystemGeometry/axialBlocksPerModule");
    H5::DataSet str_radial_blocks_per_module = file.openDataSet("/HeaderData/SystemGeometry/radialBlocksPerModule");
    H5::DataSet str_axial_blocks_per_unit = file.openDataSet("/HeaderData/SystemGeometry/axialBlocksPerUnit");
    H5::DataSet str_radial_blocks_per_unit = file.openDataSet("/HeaderData/SystemGeometry/radialBlocksPerUnit");
    H5::DataSet str_axial_units_per_module = file.openDataSet("/HeaderData/SystemGeometry/axialUnitsPerModule");
    H5::DataSet str_radial_units_per_module = file.openDataSet("/HeaderData/SystemGeometry/radialUnitsPerModule");
    H5::DataSet str_axial_modules_per_system = file.openDataSet("/HeaderData/SystemGeometry/axialModulesPerSystem");
    H5::DataSet str_radial_modules_per_system = file.openDataSet("/HeaderData/SystemGeometry/radialModulesPerSystem");
    //! \todo P.W: Find the crystal gaps and other info missing.
    H5::DataSet str_detector_axial_size = file.openDataSet("/HeaderData/SystemGeometry/detectorAxialSize");
    H5::DataSet str_intrinsic_tilt = file.openDataSet("/HeaderData/SystemGeometry/transaxial_crystal_0_offset");
    H5::DataSet str_max_number_of_non_arc_corrected_bins = file.openDataSet("/HeaderData/Sorter/dimension2Size"); // Bug in RDF9 makes this dimension2Size isntead of the expected dimension1Size
    H5::DataSet str_axial_crystals_per_block = file.openDataSet("/HeaderData/SystemGeometry/axialCrystalsPerBlock");
    H5::DataSet str_radial_crystals_per_block = file.openDataSet("/HeaderData/SystemGeometry/radialCrystalsPerBlock");
    //! \todo Convert to numbers.

    str_radial_blocks_per_module.read(&num_transaxial_blocks_per_bucket, H5::PredType::NATIVE_UINT32);
    str_axial_blocks_per_module.read(&num_axial_blocks_per_bucket, H5::PredType::NATIVE_UINT32);
    str_axial_blocks_per_unit.read(&axial_blocks_per_unit, H5::PredType::NATIVE_UINT32);
    str_radial_blocks_per_unit.read(&radial_blocks_per_unit, H5::PredType::NATIVE_UINT32);
    str_axial_units_per_module.read(&axial_units_per_module, H5::PredType::NATIVE_UINT32);
    str_radial_units_per_module.read(&radial_units_per_module, H5::PredType::NATIVE_UINT32);
    str_axial_modules_per_system.read(&axial_modules_per_system, H5::PredType::NATIVE_UINT32);
    str_radial_modules_per_system.read(&radial_modules_per_system, H5::PredType::NATIVE_UINT32);
    str_effective_ring_diameter.read(&effective_ring_diameter, H5::PredType::NATIVE_FLOAT);
    str_detector_axial_size.read(&detector_axial_size, H5::PredType::NATIVE_FLOAT);
    str_intrinsic_tilt.read(&intrinsic_tilt, H5::PredType::NATIVE_FLOAT);
    str_max_number_of_non_arc_corrected_bins.read(&max_num_non_arccorrected_bins, H5::PredType::NATIVE_UINT32);
    str_radial_crystals_per_block.read(&num_transaxial_crystals_per_block, H5::PredType::NATIVE_UINT32);
    str_axial_crystals_per_block.read(&num_axial_crystals_per_block, H5::PredType::NATIVE_UINT32);

    //PW Bin Size, max num of arc corrected bins, default num of arc corrected bins and inner ring radius not found in Listfile header.
    int num_rings  = num_axial_blocks_per_bucket*num_axial_crystals_per_block*axial_modules_per_system;
    int num_detectors_per_ring = num_transaxial_blocks_per_bucket*num_transaxial_crystals_per_block*radial_modules_per_system;
    int default_num_arccorrected_bins = 331;
    float inner_ring_radius = 311.8;
    //AB TODO check if following is valid
    float average_depth_of_interaction = 0.5f*(effective_ring_diameter-inner_ring_diameter); // Assuming this to be constant. Although this will change depending on scanner.
    float ring_spacing = detector_axial_size/num_rings;

    //! \todo : bin_size
    float bin_size = 2.01565;
    int num_axial_crystals_per_singles_unit = 1;
    int num_transaxial_crystals_per_singles_unit = 1;

    shared_ptr<Scanner> scanner_sptr(Scanner::get_scanner_from_name("GE PET/MR Signa"));
    scanner_sptr->set_num_detectors_per_ring(num_detectors_per_ring);
    scanner_sptr->set_num_rings(num_rings);
    scanner_sptr->set_max_num_non_arccorrected_bins(max_num_non_arccorrected_bins);
    scanner_sptr->set_default_num_arccorrected_bins(default_num_arccorrected_bins);
    scanner_sptr->set_inner_ring_radius(inner_ring_radius);
    scanner_sptr->set_average_depth_of_interaction(average_depth_of_interaction);
    scanner_sptr->set_ring_spacing(ring_spacing);
    scanner_sptr->set_default_bin_size(bin_size);
    scanner_sptr->set_default_intrinsic_tilt(intrinsic_tilt*_PI/180);
    scanner_sptr->set_num_axial_blocks_per_bucket(num_axial_blocks_per_bucket);
    scanner_sptr->set_num_transaxial_blocks_per_bucket(num_transaxial_blocks_per_bucket);
    scanner_sptr->set_num_axial_crystals_per_block(num_axial_crystals_per_block);
    scanner_sptr->set_num_transaxial_crystals_per_block(num_transaxial_crystals_per_block);
    scanner_sptr->set_num_axial_crystals_per_singles_unit(num_axial_crystals_per_singles_unit);
    scanner_sptr->set_num_transaxial_crystals_per_singles_unit(num_transaxial_crystals_per_singles_unit);
    scanner_sptr->set_num_detector_layers(num_detector_layers);
    scanner_sptr->set_energy_resolution(energy_resolution);
    scanner_sptr->set_reference_energy(reference_energy);

    return Succeeded::yes;
}

Succeeded GEHDF5Wrapper::initialise_exam_info()
{
    this->exam_info_sptr.reset(new ExamInfo());

    // PW Get the high and low energy threshold values from HDF5 header.
    unsigned int low_energy_thres = 0;
    unsigned int high_energy_thres = 0;

    H5::DataSet str_low_energy_thres = file.openDataSet("/HeaderData/AcqParameters/EDCATParameters/lower_energy_limit");
    H5::DataSet str_high_energy_thres = file.openDataSet("/HeaderData/AcqParameters/EDCATParameters/upper_energy_limit");

    str_low_energy_thres.read(&low_energy_thres, H5::PredType::NATIVE_UINT32);
    str_high_energy_thres.read(&high_energy_thres, H5::PredType::NATIVE_UINT32);

    // PW Set these values in exam_info_sptr.
    exam_info_sptr->set_high_energy_thres(static_cast<float>(low_energy_thres));
    exam_info_sptr->set_low_energy_thres(static_cast<float>(high_energy_thres));


    //! \todo convert time slices to timeFrameDefinitions
    //NE Copied from SignesRatesFromGEHDF5:
    //PW Get the total number of time slices from the HDF5 file format.

    unsigned int num_time_slices = 0;
    H5::DataSet timeframe_dataspace = file.openDataSet("/HeaderData/SinglesHeader/numValidSamples");
    timeframe_dataspace.read(&num_time_slices, H5::PredType::NATIVE_UINT32);

    if(is_list_file())
        m_num_singles_samples=num_time_slices;

    std::vector<std::pair<double, double> >tf(num_time_slices);

    for (unsigned int i = 0; i < num_time_slices; ++i)
    {
        tf[i].first = i;
        tf[i].second = i + 1;
    }

    TimeFrameDefinitions tm(tf);
    exam_info_sptr->set_time_frame_definitions(tm);

    return Succeeded::yes;
}

Succeeded GEHDF5Wrapper::initialise_listmode_data(const std::string &path)
{
    if(!is_list_file())
        error("The file provided is not listmode. Aborting");
    if(path.size() == 0)
    {
        if(rdf_ver==9) 
        {
            m_address = "/ListData/listData";
            // These values are not in the file are come from info shared by GE. 
            m_size_of_record_signature = 6;
            m_max_size_of_record = 16;
        }
        else
            return Succeeded::no;
    }
    else
        m_address = path;

    m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address)));

    m_dataspace = m_dataset_sptr->getSpace();
    int dataset_list_Ndims = m_dataspace.getSimpleExtentNdims();

    hsize_t dims_out[dataset_list_Ndims];
    m_dataspace.getSimpleExtentDims( dims_out, NULL);
    m_list_size=dims_out[0];
    const long long unsigned int tmp_size_of_record_signature = m_size_of_record_signature;
    m_memspace_ptr = new H5::DataSpace( dataset_list_Ndims,
                            &tmp_size_of_record_signature);


    return Succeeded::yes;
}

Succeeded GEHDF5Wrapper::initialise_singles_data(const std::string &path)
{
    
    if(!is_list_file())
        error("The file provided is not listmode. Aborting");

    if(path.size() == 0)
    {
        if(rdf_ver==9)
        {
            m_address = "/Singles/CrystalSingles/sample"; 
            // Get the DataSpace (metadata) corresponding to the DataSet that we want to read
            m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address + "1")));
            m_dataspace = m_dataset_sptr->getSpace();
            // Create an array to host the size of the dimensions
            const int rank = m_dataspace.getSimpleExtentNdims();
            hsize_t dims[rank];
            // hsize_t max_dims[dataspace_Ndims]; // AB: Do we want the max_dims?
            // Read size of dimensions
            m_dataspace.getSimpleExtentDims( dims, NULL); 

            // AB todo: MATLAB reader returns [448 45], but dims will be [45 448] and we want it in that order
            m_NX_SUB = dims[0];    // hyperslab dimensions
            m_NY_SUB = dims[1];
            m_NZ_SUB = (rank==2)? 1 : dims[2]; // Signa has rank==2, but this stay shere just in case...
            
            m_NX = dims[0];       // output buffer dimensions
            m_NY = dims[1];
            m_NZ = (rank==2)? 1 : dims[2]; 
        }
        else
            return Succeeded::no;
    }
    else
        m_address = path;

    return Succeeded::yes;
}

Succeeded GEHDF5Wrapper::initialise_proj_data(const std::string& path,
                                                 const unsigned int view_num)
{
    if(!is_sino_file())
        error("The file provided is not projection/sinogram data. Aborting");
    if(path.size() == 0)
    {
        if(rdf_ver==9) 
        {
            m_address = "/SegmentData/Segment2/3D_TOF_Sinogram/view";

            m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address + "1"))); // the first will do
            m_dataspace = m_dataset_sptr->getSpace();
            // Create an array to host the size of the dimensions
            const int rank = m_dataspace.getSimpleExtentNdims();
            hsize_t dims[rank];
            // hsize_t max_dims[dataspace_Ndims]; // AB: Do we want the max_dims?
            // Read size of dimensions
            m_dataspace.getSimpleExtentDims( dims, NULL);

            // AB for signa, these where [1981,27,357] and [45,448,357]
            m_NX_SUB = dims[0] ;    // hyperslab dimensions
            m_NY_SUB = dims[1];
            m_NZ_SUB = dims[2];
            // AB todo: ??? why are these different?
            m_NX = 45;        // output buffer dimensions
            m_NY = 448;
            m_NZ = 357;

            if(view_num > 0)
            {
                m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address+std::to_string(view_num))));
                m_dataspace = m_dataset_sptr->getSpace();
            }
        }
        else
            return Succeeded::no;
    }
    else
        m_address = path;

    return Succeeded::yes;
}

// PW The geo factors are stored in geo3d file under the file path called /SegmentData/Segment4/3D_Norm_correction/slice%d where
// slice numbers go from 1 to 16. Here this path is initialised, along with the output buffer and hyperslab.
//
Succeeded GEHDF5Wrapper::initialise_geo_factors_data(const std::string& path,
                                                 const unsigned int slice_num)
{
    if(!is_geo_file())
        error("The file provided is not geometry data. Aborting");
    if(path.size() == 0)
    {
        if(rdf_ver==9)
        {
            m_address = "/SegmentData/Segment4/3D_Norm_Correction/slice";
            if(slice_num > 0)
            {
                // Open Dataset and get Dataspace(metadata)
                m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address + std::to_string(slice_num))));
                m_dataspace = m_dataset_sptr->getSpace();

                // Read dimensions
                const int rank = m_dataspace.getSimpleExtentNdims();
                hsize_t dims[rank];
                m_dataspace.getSimpleExtentDims( dims, NULL);

                // AB: MATLAB reader returns [357 1981] yet here it was written NX=1981 NY=357. MATLAB is not to trust. 
                m_NX_SUB = dims[0];    // hyperslab dimensions
                m_NY_SUB = dims[1];
                m_NZ_SUB = (rank==2)? 1 : dims[2]; // Signa has rank==2, but this stay shere just in case...

                m_NX = dims[0];        // output buffer dimensions
                m_NY = dims[1];
                m_NZ = (rank==2)? 1 : dims[2]; // Signa has rank==2, but this stay shere just in case...
            }
            // AB todo: else? what if its being called with no input? we do nothing?
        }
        else
            return Succeeded::no;
    }
    else
        m_address = path;

    return Succeeded::yes;
}
// This info is in norm3d file
Succeeded GEHDF5Wrapper::initialise_efficiency_factors(const std::string& path)
{
    if(!is_norm_file())
        error("The file provided is not norm data. Aborting");
    if(path.size() == 0)
    {
        if(rdf_ver==9) 
        {
            
            m_address = "/3DCrystalEfficiency/crystalEfficiency";
            // Get the DataSpace (metadata) corresponding to the DataSet that we want to read
            m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address)));
            m_dataspace = m_dataset_sptr->getSpace();
            // Create an array to host the size of the dimensions
            const int rank = m_dataspace.getSimpleExtentNdims();
            hsize_t dims[rank];
            // hsize_t max_dims[dataspace_Ndims]; // AB: Do we want the max_dims?
            // Read size of dimensions
            m_dataspace.getSimpleExtentDims( dims, NULL);


            // AB: MATLAB reader returns [896 45] yet here it was written NX=45 NY=448. MATLAB is not to trust. 
            m_NX_SUB = dims[0];    // hyperslab dimensions
            m_NY_SUB = dims[1]/scanner_sptr->get_num_detectors_per_ring();
            m_NZ_SUB = (rank==2)? 1 : dims[2]; 
            
            m_NX = dims[0];       // output buffer dimensions
            m_NY = dims[1]/scanner_sptr->get_num_detectors_per_ring();
            m_NZ = (rank==2)? 1 : dims[2]; 
        }
        else
            return Succeeded::no;
    }
    else
        m_address = path;

    return Succeeded::yes;
}

// Developed for listmode access
Succeeded GEHDF5Wrapper::get_from_dataspace(std::streampos& current_offset, char* output)
{
    if(!is_list_file())
        error("The file provided is not list data. Aborting");
    hsize_t pos = static_cast<hsize_t>(current_offset);
    m_dataspace.selectHyperslab( H5S_SELECT_SET, &m_size_of_record_signature, &pos );
    m_dataset_sptr->read( output, H5::PredType::STD_U8LE, *m_memspace_ptr, m_dataspace );
    current_offset += static_cast<std::streampos>(m_size_of_record_signature);

    return Succeeded::yes;
}

// Developed for ProjData
Succeeded GEHDF5Wrapper::get_from_dataset(Array<3, unsigned char> &output,
                                          const std::array<unsigned long long int, 3>& offset,
                                          const std::array<unsigned long long int, 3>& stride)
{
    // AB: this is only used for proj data, so for now lets ensure the file is sino. If its reused, we can change this. 
    if(!is_sino_file())
        error("File is not sinogram. Aborting");

    if(offset[0] != 0 || offset[1] != 0 || offset[2] != 0) //AB there are other C++ ways of doing this, but this is the most readable really.
        error("Only {0,0,0} offset supported. Aborting");
    if(stride[0] != 1 || stride[1] != 1 || stride[2] != 1)
        error("Only {1,1,1} stride supported. Aborting");

    // We know the size of the DataSpace
    hsize_t str_dimsf[3] {m_NX_SUB, m_NY_SUB, m_NZ_SUB} ;
    std::cout << "Its me that fails, right?" <<  m_NX_SUB<<m_NY_SUB<<m_NZ_SUB<<std::endl;
    output.resize(IndexRange3D(m_NX_SUB,m_NY_SUB,m_NZ_SUB));
    output.resize(IndexRange3D(m_NX_SUB,m_NY_SUB,m_NZ_SUB));
    std::cout << " right" <<std::endl;

    m_dataspace.selectHyperslab(H5S_SELECT_SET, str_dimsf, offset.data());
    m_memspace_ptr= new H5::DataSpace(3, str_dimsf);
    m_dataset_sptr->read(output.get_data_ptr(), H5::PredType::STD_U8LE, *m_memspace_ptr, m_dataspace);
    output.release_data_ptr();

    return Succeeded::yes;
}

//! \todo Array read as UINT32 should have an output of std::uint32_t.
//! \todo Check read data type as it's unlikely that it is NATIVE_UINT32, it may be STD_U32LE.
//PW Developed for Geometric Correction Factors
Succeeded GEHDF5Wrapper::get_from_2d_dataset(Array<1, unsigned int> &output,
                                             const std::array<unsigned long long int, 2>& offset,
                                             const std::array<unsigned long long int, 2>& stride)
                                        
{
    // AB: this is only used for geo data, so for now lets ensure the file is sino. If its reused, we can change this. 
    if(!is_geo_file())
        error("File is Geometry. Aborting");

    if(offset[0] != 0 || offset[1] != 0) //AB there are other C++ ways of doing this, but this is the most readable really.
        error("Only {0,0} offset supported. Aborting");
    if(stride[0] != 1 || stride[1] != 1)
        error("Only {1,1} stride supported. Aborting");

    // We know the size of the DataSpace
    hsize_t str_dimsf[2] {m_NX_SUB, m_NY_SUB} ;
    output.resize(m_NX_SUB*m_NY_SUB);

    m_dataspace.selectHyperslab(H5S_SELECT_SET, str_dimsf, offset.data());
    m_memspace_ptr= new H5::DataSpace(2, str_dimsf);
    m_dataset_sptr->read(output.get_data_ptr(), H5::PredType::NATIVE_UINT32, *m_memspace_ptr, m_dataspace);
    output.release_data_ptr();

    return Succeeded::yes;
}

//PW Developed for Efficiency Factors
Succeeded GEHDF5Wrapper::get_from_2d_dataset(Array<1, float> &output,
                                             const std::array<unsigned long long int, 2>& offset,
                                             const std::array<unsigned long long int, 2>& stride)
                                        
{
    if(!is_norm_file())
        error("The file provided is not norm data. Aborting");

    if(offset[0] != 0 || offset[1] != 0) //AB there are other C++ ways of doing this, but this is the most readable really.
        error("Only {0,0} offset supported. Aborting");
    if(stride[0] != 1 || stride[1] != 1)
        error("Only {1,1} stride supported. Aborting");

    // We know the size of the DataSpace
    hsize_t str_dimsf[2] {m_NX_SUB, m_NY_SUB} ;
    output.resize(m_NX_SUB*m_NY_SUB);

    m_dataspace.selectHyperslab(H5S_SELECT_SET, str_dimsf, offset.data());
    m_memspace_ptr= new H5::DataSpace(2, str_dimsf);
    m_dataset_sptr->read(output.get_data_ptr(), H5::PredType::NATIVE_FLOAT, *m_memspace_ptr, m_dataspace);
    output.release_data_ptr();

    return Succeeded::yes;
}

//! \todo Array read as UINT32 should have an output of std::uint32_t.
//! \todo Check the H5 data type as it's unlikely that it is NATIVE_UINT32, it may be STD_U32LE.
// Developed for Singles
Succeeded GEHDF5Wrapper::get_singles(const unsigned int current_id,
                                     Array<1, unsigned int>& output)
{
    if(!is_list_file())
            error("The file provided is not listmode. Aborting");
    // AB: todo check if output allocated data size is correct.
    m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address + std::to_string(current_id))));
    m_dataset_sptr->read(output.get_data_ptr(), H5::PredType::NATIVE_UINT32);
    output.release_data_ptr();

    return Succeeded::yes;
}

//! \todo Array read as UINT32 should have an output of std::uint32_t.
//! \todo Check the H5 data type as it's unlikely that it is NATIVE_UINT32, it may be STD_U32LE.
// Developed for Singles
Succeeded GEHDF5Wrapper::get_singles(const unsigned int current_id,
                                     Array<2, unsigned int>& output)
{
    if(!is_list_file())
            error("The file provided is not listmode. Aborting");
    // AB: todo check if output allocated data size is correct.
    m_dataset_sptr.reset(new H5::DataSet(file.openDataSet(m_address + std::to_string(current_id))));
    m_dataset_sptr->read( output[current_id].get_data_ptr(), H5::PredType::NATIVE_UINT32);
    output[current_id].release_data_ptr();

    return Succeeded::yes;
}

} // namespace
}
END_NAMESPACE_STIR

